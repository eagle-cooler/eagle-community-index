name: Create Index Entry

on:
  workflow_dispatch:
    inputs:
      repository:
        description: 'Repository to create entry for (format: owner/repo)'
        required: true
        type: string
        default: 'eagle-cooler/eagle-webdav'
      entry_type:
        description: 'Entry type'
        required: true
        type: choice
        options:
          - candidate
          - primary
        default: 'candidate'
      force_update:
        description: 'Force update existing entry'
        required: false
        type: boolean
        default: false
  
  workflow_call:
    inputs:
      repository:
        description: 'Repository to create entry for (format: owner/repo)'
        required: true
        type: string
      entry_type:
        description: 'Entry type (candidate or primary)'
        required: true
        type: string
      force_update:
        description: 'Force update existing entry'
        required: false
        type: boolean
        default: false

jobs:
  create-entry:
    runs-on: ubuntu-latest
    
    outputs:
      entry-created: ${{ steps.create-entry.outputs.entry_created }}
      entry-updated: ${{ steps.create-entry.outputs.entry_updated }}
      repository: ${{ steps.create-entry.outputs.repository }}
      plugin-id: ${{ steps.create-entry.outputs.plugin_id }}
      entry-type: ${{ steps.create-entry.outputs.entry_type }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Validate inputs
        run: |
          REPO="${{ inputs.repository }}"
          TYPE="${{ inputs.entry_type }}"
          
          if [[ ! "$REPO" =~ ^[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+$ ]]; then
            echo "ERROR: Invalid repository format. Expected 'owner/repo', got '$REPO'"
            exit 1
          fi
          
          if [[ "$TYPE" != "candidate" && "$TYPE" != "primary" ]]; then
            echo "ERROR: Invalid entry type. Must be 'candidate' or 'primary', got '$TYPE'"
            exit 1
          fi
          
          echo "Repository format is valid: $REPO"
          echo "Entry type is valid: $TYPE"
      
      - name: Check if repository is blacklisted
        run: |
          if [ -f "configs/blacklist_repos.json" ]; then
            if jq -e --arg repo "${{ inputs.repository }}" '.[] | select(.repository == $repo)' configs/blacklist_repos.json > /dev/null; then
              BLACKLIST_ENTRY=$(jq --arg repo "${{ inputs.repository }}" '.[] | select(.repository == $repo)' configs/blacklist_repos.json)
              BLACKLIST_REASON=$(echo "$BLACKLIST_ENTRY" | jq -r '.reason // "Multiple verification failures"')
              
              echo "## ⛔ Repository Blacklisted" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Repository:** \`${{ inputs.repository }}\`" >> $GITHUB_STEP_SUMMARY
              echo "**Status:** 🚫 BLACKLISTED" >> $GITHUB_STEP_SUMMARY
              echo "**Reason:** $BLACKLIST_REASON" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Action Required:** Repository must be removed from blacklist before creating index entry." >> $GITHUB_STEP_SUMMARY
              
              echo "::error title=Repository Blacklisted::Repository ${{ inputs.repository }} is blacklisted and cannot be added to index"
              exit 1
            fi
          fi
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      - name: Create index entry
        id: create-entry
        run: |
          echo "Creating ${{ inputs.entry_type }} entry for ${{ inputs.repository }}"
          
          # Build command arguments
          ARGS="scripts/create-index-entry.py ${{ inputs.repository }} ${{ inputs.entry_type }}"
          if [ "${{ inputs.force_update }}" = "true" ]; then
            ARGS="$ARGS --force-update"
          fi
          
          # Run the script and capture output
          set +e  # Don't exit on error
          OUTPUT=$(python $ARGS 2>&1)
          EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          echo "=== Create Entry Results ==="
          echo "$OUTPUT"
          
          # Extract plugin info from output for use in summary
          PLUGIN_ID=$(echo "$OUTPUT" | grep -o "Plugin ID: [^[:space:]]*" | cut -d' ' -f3 || echo "unknown")
          PLUGIN_NAME=$(echo "$OUTPUT" | grep -o "Plugin Name: .*" | cut -d' ' -f3- || echo "unknown")
          ENTRY_TYPE=$(echo "$OUTPUT" | grep -o "Entry Type: [^[:space:]]*" | cut -d' ' -f3 || echo "${{ inputs.entry_type }}")
          LATEST_VERSION=$(echo "$OUTPUT" | grep -o "Latest Version: [^[:space:]]*" | cut -d' ' -f3 || echo "unknown")
          SERIALIZED_NAME=$(echo "$OUTPUT" | grep -o "Serialized Name: [^[:space:]]*" | cut -d' ' -f3 || echo "unknown")
          
          # Set outputs
          echo "success=$([ $EXIT_CODE -eq 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "repository=${{ inputs.repository }}" >> $GITHUB_OUTPUT
          echo "plugin_id=$PLUGIN_ID" >> $GITHUB_OUTPUT
          echo "plugin_name=$PLUGIN_NAME" >> $GITHUB_OUTPUT
          echo "entry_type=$ENTRY_TYPE" >> $GITHUB_OUTPUT
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "serialized_name=$SERIALIZED_NAME" >> $GITHUB_OUTPUT
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Determine if entry was created or updated
          if echo "$OUTPUT" | grep -q "Updated.*entry"; then
            echo "entry_created=false" >> $GITHUB_OUTPUT
            echo "entry_updated=true" >> $GITHUB_OUTPUT
          else
            echo "entry_created=true" >> $GITHUB_OUTPUT
            echo "entry_updated=false" >> $GITHUB_OUTPUT
          fi
          
          # Exit with the same code as the script
          exit $EXIT_CODE
      
      - name: Create entry summary
        if: ${{ steps.create-entry.outputs.success == 'true' }}
        run: |
          ACTION="${{ steps.create-entry.outputs.entry_created == 'true' && 'Created' || 'Updated' }}"
          
          echo "## ✅ Index Entry $ACTION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ inputs.repository }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Plugin ID:** \`${{ steps.create-entry.outputs.plugin_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Plugin Name:** ${{ steps.create-entry.outputs.plugin_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Entry Type:** ${{ steps.create-entry.outputs.entry_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Latest Version:** ${{ steps.create-entry.outputs.latest_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Serialized Name:** ${{ steps.create-entry.outputs.serialized_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Files Updated" >> $GITHUB_STEP_SUMMARY
          echo "- \`index/alldex.json\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`index/${{ steps.create-entry.outputs.entry_type }}.json\`" >> $GITHUB_STEP_SUMMARY
      
      - name: Create failure summary
        if: ${{ steps.create-entry.outputs.success != 'true' }}
        run: |
          echo "## ❌ Index Entry Creation Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ inputs.repository }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Entry Type:** ${{ inputs.entry_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Exit Code:** ${{ steps.create-entry.outputs.exit_code }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the workflow logs for detailed error information." >> $GITHUB_STEP_SUMMARY
      
      - name: Commit changes
        if: ${{ steps.create-entry.outputs.success == 'true' }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add index/alldex.json index/${{ steps.create-entry.outputs.entry_type }}.json
          
          ACTION="${{ steps.create-entry.outputs.entry_created == 'true' && 'Add' || 'Update' }}"
          git commit -m "$ACTION ${{ inputs.entry_type }} entry: ${{ steps.create-entry.outputs.plugin_id }} from ${{ inputs.repository }}" || echo "No changes to commit"
          git push || echo "No changes to push"
